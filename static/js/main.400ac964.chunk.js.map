{"version":3,"sources":["components/Container/Container.module.css","App.module.css","components/ContactForm/ContactForm.module.css","redux/contacts/contacts-types.js","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/Container/Container.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","name","number","type","types","payload","id","uuidv4","console","log","actions","ContactForm","state","createIdName","createIdNumber","saveContact","e","currentTarget","value","setState","submitContact","preventDefault","props","OnSubmit","reset","onSubmit","this","className","s","label","htmlFor","head__field","input","onChange","btn","Component","connect","contacts","items","dispatch","Container","title","children","container","App","page__wrapper","combineReducers","filter","rootReducer","contactsReducer","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oIACAA,EAAOC,QAAU,CAAC,MAAQ,2B,mBCA1BD,EAAOC,QAAU,CAAC,cAAgB,6B,kBCAlCD,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,YAAc,iCAAiC,IAAM,2B,mLCD3F,EACN,eCEHC,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,MAAuB,CACtCC,KAAMC,EACNC,QAAS,CACLC,GAAIC,cACJN,KAAMA,EACNC,OAAQA,K,gBCChBM,QAAQC,IAAI,kDAAqBC,G,IAE3BC,E,4MACFC,MAAQ,CACJX,KAAM,GACNC,OAAQ,I,EAGZW,aAAeN,c,EACfO,eAAiBP,c,EAEjBQ,YAAc,SAAAC,GAAM,IAAD,EACSA,EAAEC,cAAlBhB,EADO,EACPA,KAAMiB,EADC,EACDA,MACd,EAAKC,SAAL,eACKlB,EAAOiB,K,EAIhBE,cAAgB,SAAAJ,GACZA,EAAEK,iBAEFb,QAAQC,IAAI,yFAAoB,EAAKG,OACrCJ,QAAQC,IAAI,yBAAqB,EAAKa,MAAMC,YAE5C,EAAKD,MAAMC,SAAS,EAAKX,OACzB,EAAKY,S,EAGTA,MAAQ,WACJ,EAAKL,SAAS,CACVlB,KAAM,GACNC,OAAQ,M,uDAKZ,OACI,0BAAMuB,SAAUC,KAAKN,eACjB,2BAAOO,UAAWC,IAAEC,MAAOC,QAASJ,KAAKb,cACrC,yBAAKc,UAAWC,IAAEG,aAAlB,QACA,2BACI5B,KAAK,OACLF,KAAK,OACL0B,UAAWC,IAAEI,MACbd,MAAOQ,KAAKd,MAAMX,KAClBgC,SAAUP,KAAKX,YACfT,GAAIoB,KAAKb,gBAIjB,2BAAOc,UAAWC,IAAEC,MAAOC,QAASJ,KAAKZ,gBACrC,yBAAKa,UAAWC,IAAEG,aAAlB,UACA,2BACI5B,KAAK,MACLF,KAAK,SACL0B,UAAWC,IAAEI,MACbd,MAAOQ,KAAKd,MAAMV,OAClB+B,SAAUP,KAAKX,YACfT,GAAIoB,KAAKZ,kBAGjB,4BAAQa,UAAWC,IAAEM,IAAK/B,KAAK,UAA/B,oB,GA3DUgC,aA2EXC,eARS,SAAAxB,GAAK,MAAK,CAC9ByB,SAAUzB,EAAMyB,SAASC,UAGF,SAAAC,GAAQ,MAAK,CACpCd,SAAU,SAACxB,EAAMC,GAAP,OAAkBqC,EAAS7B,EAAmBT,QAG7CmC,CAA6CzB,G,iBCzE7C6B,EATG,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACI,yBAAKf,UAAWC,IAAEe,WACd,wBAAIhB,UAAWC,IAAEa,OAAQA,GACxBC,ICIQE,E,uKAwEb,OACI,yBAAKjB,UAAWC,IAAEiB,eACd,kBAAC,EAAD,CAAWJ,MAAO,aACd,kBAAC,EAAD,OAUJ,kBAAC,EAAD,CAAWA,MAAO,kB,GArFDN,a,uBCIlBW,4BAAgB,CAC3BR,MAdU,WAAoC,IAAnC1B,EAAkC,uDAA1B,GAA0B,yCAApBT,EAAoB,EAApBA,KAAME,EAAc,EAAdA,QAC/B,OAAQF,GACJ,KAAKC,EACD,MAAM,GAAN,mBAAWQ,GAAX,CAAkBP,IACtB,QACI,OAAOO,IAUfmC,OANW,WAA0B,IAAzBnC,EAAwB,uDAAhB,GACpB,OAAOA,KCTLoC,EAAcF,0BAAgB,CAChCT,SAAUY,IAICC,EADDC,sBAAYH,EAAaI,iCCFvCC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,QAGRM,SAASC,eAAe,W","file":"static/js/main.400ac964.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Container_title__1Nync\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page__wrapper\":\"App_page__wrapper__29F2_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__230Oz\",\"head__field\":\"ContactForm_head__field__3LcQO\",\"btn\":\"ContactForm_btn__1mPIr\"};","export default {\n    ADD: 'contacts/Add',\n    FILTER: 'contacts/Filter',\n    DELETE: 'contacts/Delete',\n};\n","import { v4 as uuidv4 } from 'uuid';\nimport types from './contacts-types';\n\nconst addContact = ({ name, number }) => ({\n    type: types.ADD,\n    payload: {\n        id: uuidv4(),\n        name: name,\n        number: number,\n    },\n});\n\nexport { addContact };\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\n// import { addContact } from '../../redux/contacts/contacts-actions';\nimport * as actions from '../../redux/contacts/contacts-actions';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport s from './ContactForm.module.css';\n\nconsole.log('импорт addContact', actions.addContact);\n\nclass ContactForm extends Component {\n    state = {\n        name: '',\n        number: '',\n    };\n\n    createIdName = uuidv4();\n    createIdNumber = uuidv4();\n\n    saveContact = e => {\n        const { name, value } = e.currentTarget;\n        this.setState({\n            [name]: value,\n        });\n    };\n\n    submitContact = e => {\n        e.preventDefault();\n\n        console.log('локальный стейт:', this.state);\n        console.log('OnSubmit в props:', this.props.OnSubmit());\n\n        this.props.OnSubmit(this.state);\n        this.reset();\n    };\n\n    reset = () => {\n        this.setState({\n            name: '',\n            number: '',\n        });\n    };\n\n    render() {\n        return (\n            <form onSubmit={this.submitContact}>\n                <label className={s.label} htmlFor={this.createIdName}>\n                    <div className={s.head__field}>Name</div>\n                    <input\n                        type=\"text\"\n                        name=\"name\"\n                        className={s.input}\n                        value={this.state.name}\n                        onChange={this.saveContact}\n                        id={this.createIdName}\n                    />\n                </label>\n\n                <label className={s.label} htmlFor={this.createIdNumber}>\n                    <div className={s.head__field}>Number</div>\n                    <input\n                        type=\"tel\"\n                        name=\"number\"\n                        className={s.input}\n                        value={this.state.number}\n                        onChange={this.saveContact}\n                        id={this.createIdNumber}\n                    />\n                </label>\n                <button className={s.btn} type=\"submit\">\n                    Add contact\n                </button>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    contacts: state.contacts.items,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onSubmit: (name, number) => dispatch(actions.addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\n\nimport s from './Container.module.css';\n\nconst Container = ({ title, children }) => {\n    return (\n        <div className={s.container}>\n            <h2 className={s.title}>{title}</h2>\n            {children}\n        </div>\n    );\n};\n\nexport default Container;\n","import React, { Component } from 'react';\n\n// import { v4 as uuidv4 } from 'uuid';\n\nimport s from './App.module.css';\n\nimport ContactForm from './components/ContactForm';\nimport Container from './components/Container';\n// import ContactsList from './components/ContactsList';\n// import Filter from './components/Filter';\n// import Message from './components/Message';\n\nexport default class App extends Component {\n    // state = {\n    //     contacts: [],\n    //     filter: '',\n    // }\n\n    // componentDidMount() {\n    //     const contacts = localStorage.getItem('contacts');\n    //     const parseContacts = JSON.parse(contacts);\n    //     if (parseContacts) {\n    //         this.setState({ contacts: parseContacts });\n    //     }\n    // }\n\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (prevState.contacts !== this.state.contacts) {\n    //         localStorage.setItem(\n    //             'contacts',\n    //             JSON.stringify(this.state.contacts),\n    //         );\n    //     }\n    // }\n\n    // addContact = newContact => {\n    //     const { contacts } = this.state;\n    //     const contactItem = {\n    //         id: uuidv4(),\n    //         name: newContact.name,\n    //         number: newContact.number,\n    //     };\n    //     const isCorrectInput =\n    //         contactItem.name.length !== 0 && contactItem.number.length !== 0;\n\n    //     if (!isCorrectInput) {\n    //         alert('One or more fields is full');\n    //         return;\n    //     }\n\n    //     const isNewContactDublicate = contacts.some(\n    //         contact => contact.name === newContact.name.trim(),\n    //     );\n\n    //     if (isNewContactDublicate) {\n    //         alert(`${newContact.name.trim()} is alredy in contacts`);\n    //         return;\n    //     }\n\n    //     this.setState({ contacts: [contactItem, ...contacts] });\n    // };\n\n    // const = e => {\n    //     this.setState({ filter: e.currentTarget.value });\n    // };\n\n    // getVisibleContacts = () => {\n    //     const { contacts, filter } = this.state;\n    //     const normalizerFilter = filter.toLocaleLowerCase();\n    //     return contacts.filter(contact =>\n    //         contact.name.toLocaleLowerCase().includes(normalizerFilter),\n    //     );\n    // };\n\n    // deleteContact = idForDel => {\n    //     this.setState(prevState => ({\n    //         contacts: prevState.contacts.filter(\n    //             prevContact => prevContact.id !== idForDel,\n    //         ),\n    //     }));\n    // };\n\n    render() {\n        // const visibleContacts = this.getVisibleContacts();\n        return (\n            <div className={s.page__wrapper}>\n                <Container title={'Phonebook'}>\n                    <ContactForm />\n                    {/* {this.state.contacts.length > 1 && (\n                        <Filter\n                            value={this.state.filter}\n                            onChange={this.changeFilter}\n                        />\n                    )}\n                    <ContactForm OnSubmit={this.addContact} /> */}\n                </Container>\n\n                <Container title={'Contacts'}>\n                    {/* {this.state.contacts.length > 0 ? (\n                        <ContactsList\n                            contacts={visibleContacts}\n                            onclickBtn={this.deleteContact}\n                        />\n                    ) : (\n                        <Message text={'Phonebook is empty'} />\n                    )} */}\n                </Container>\n            </div>\n        );\n    }\n}\n","import { combineReducers } from 'redux';\nimport types from './contacts-types';\n\nconst items = (state = [], { type, payload }) => {\n    switch (type) {\n        case types.ADD:\n            return [...state, payload];\n        default:\n            return state;\n    }\n};\n\nconst filter = (state = '', actions) => {\n    return state;\n};\n\nexport default combineReducers({\n    items,\n    filter,\n});\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst rootReducer = combineReducers({\n    contacts: contactsReducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools());\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}